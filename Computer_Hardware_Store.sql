-- Computer_Hardware_Store_FULL_DATABASE.sql
-- Contains: Schema, Sample Data, Indexes, Triggers, and Security

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- 1. Database Setup
DROP DATABASE IF EXISTS Computer_Hardware_Store;
CREATE DATABASE Computer_Hardware_Store CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE Computer_Hardware_Store;

-- =====================
-- 2. SCHEMA DEFINITION
-- =====================

CREATE TABLE STORE(
    STOREID INTEGER PRIMARY KEY,
    LOCATION VARCHAR(255),
    NAME VARCHAR(255) NOT NULL,
    PHONE INTEGER UNIQUE,
    MANAGER_ID INTEGER
);

CREATE TABLE PERSON(
    SSN INTEGER PRIMARY KEY COMMENT 'For non-SSN users: SHA256(email)[:9] converted to integer',
    NAME VARCHAR(255) NOT NULL,
    PHONE INTEGER UNIQUE,
    ADDRESS VARCHAR(255) NOT NULL,
    is_synthetic_ssn BOOLEAN DEFAULT FALSE COMMENT 'TRUE for auto-generated SSNs'
);

CREATE TABLE CUSTOMER(
    EMAIL VARCHAR(255) PRIMARY KEY,
    SSN INTEGER NOT NULL,
    PASSWORD_HASH VARCHAR(512) NOT NULL COMMENT 'Raw SHA-256 hash',
    FOREIGN KEY (SSN) REFERENCES PERSON (SSN)
);

CREATE TABLE EMPLOYEE( 
    EMPLOYEE_ID INTEGER PRIMARY KEY,
    SSN INTEGER NOT NULL,
    ROLE VARCHAR(50),
    STOREID INTEGER,
    PASSWORD_HASH VARCHAR(512), -- Raw SHA-256 hash
    FOREIGN KEY (SSN) REFERENCES PERSON (SSN),
    FOREIGN KEY (STOREID) REFERENCES STORE (STOREID)
);

CREATE TABLE ORDERS(
    ORDER_ID INTEGER PRIMARY KEY AUTO_INCREMENT, -- Added AUTO_INCREMENT
    ORDER_DATE DATE NOT NULL,
    ORDER_NUMBER VARCHAR(20) UNIQUE NOT NULL COMMENT 'User-facing unique random order identifier', -- ORDER_NUMBER FOR CUSTOMER ORDER HISTORY
    EMAIL VARCHAR(255),
    EMPLOYEE_ID INTEGER,
    STATUS VARCHAR(20) DEFAULT 'Pending',
    FOREIGN KEY (EMAIL) REFERENCES CUSTOMER (EMAIL),
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID)
);

CREATE TABLE CATEGORY(
    CATEGORY_NAME VARCHAR(255) PRIMARY KEY,
    GENERATION INTEGER
);

CREATE TABLE SUPPLIER(
    SUPPLIER_ID INTEGER PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL
);

CREATE TABLE SUPPLIER_DELIVERY(
    DELIVERY_NO INTEGER AUTO_INCREMENT PRIMARY KEY,
    SUPPLIER_ID INTEGER,
    STATUS VARCHAR(255),
    DELIVERY_DATE DATE NOT NULL,
    FOREIGN KEY (SUPPLIER_ID) REFERENCES SUPPLIER (SUPPLIER_ID)
);

CREATE TABLE PRODUCT(
    PRODUCTID INTEGER PRIMARY KEY,
    NAME VARCHAR(255),
    PRICE DECIMAL(10,2),
    CATEGORY_NAME VARCHAR(255),
    STOREID INTEGER NOT NULL,
    SUPPLIER_ID INTEGER NOT NULL,
    DELIVERY_NO INTEGER NOT NULL,
    NO_OF_PRODUCTS INTEGER,
    IMAGE_URL VARCHAR(255), -- Added IMAGE_URL column
    FOREIGN KEY (CATEGORY_NAME) REFERENCES CATEGORY (CATEGORY_NAME),
    FOREIGN KEY (STOREID) REFERENCES STORE (STOREID),
    FOREIGN KEY (SUPPLIER_ID) REFERENCES SUPPLIER (SUPPLIER_ID),
    FOREIGN KEY (DELIVERY_NO) REFERENCES SUPPLIER_DELIVERY (DELIVERY_NO) ON DELETE CASCADE
);

-- Added ORDER_ITEMS table
CREATE TABLE ORDER_ITEMS (
    ORDER_ITEM_ID INTEGER PRIMARY KEY AUTO_INCREMENT,
    ORDER_ID INTEGER NOT NULL,
    PRODUCTID INTEGER NOT NULL,
    QUANTITY INTEGER NOT NULL,
    PRICE_AT_PURCHASE DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID) ON DELETE CASCADE,
    FOREIGN KEY (PRODUCTID) REFERENCES PRODUCT(PRODUCTID)
    -- Note: No FK to PRODUCT on delete cascade, as we might want historical order items even if product is deleted
);


CREATE TABLE PAYMENT(
    PAYMENT_NO INTEGER PRIMARY KEY AUTO_INCREMENT, -- Added AUTO_INCREMENT
    PAYMENT_TYPE VARCHAR(255) NOT NULL,
    AMOUNT DECIMAL(10,2) NOT NULL,
    DATE DATE,
    STATUS VARCHAR(20) DEFAULT 'Pending'
);

CREATE TABLE INVENTORY(
    INVENTORY_ID INTEGER AUTO_INCREMENT PRIMARY KEY,
    STOCK_LEVEL INTEGER,
    LAST_UPDATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE MAKES_PAYMENT(
    PAYMENT_NO INTEGER,
    ORDER_ID INTEGER,
    EMAIL VARCHAR(255),
    PRIMARY KEY (PAYMENT_NO, ORDER_ID, EMAIL),
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS (ORDER_ID) ON DELETE CASCADE,
    FOREIGN KEY (PAYMENT_NO) REFERENCES PAYMENT (PAYMENT_NO),
    FOREIGN KEY (EMAIL) REFERENCES CUSTOMER (EMAIL)
);

CREATE TABLE UPDATES(
    EMPLOYEE_ID INTEGER,
    INVENTORY_ID INTEGER,
    SUPPLIER_ID INTEGER,
    DELIVERY_NO INTEGER,
    PRIMARY KEY(EMPLOYEE_ID, INVENTORY_ID, SUPPLIER_ID, DELIVERY_NO),
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID),
    FOREIGN KEY (INVENTORY_ID) REFERENCES INVENTORY (INVENTORY_ID),
    FOREIGN KEY (SUPPLIER_ID) REFERENCES SUPPLIER (SUPPLIER_ID),
    FOREIGN KEY (DELIVERY_NO) REFERENCES SUPPLIER_DELIVERY (DELIVERY_NO) ON DELETE CASCADE
);

-- =====================
-- 3. SAMPLE DATA
-- =====================

-- PERSON (with real and synthetic SSNs)
INSERT INTO PERSON (SSN, NAME, PHONE, ADDRESS, is_synthetic_ssn) VALUES
(54128, 'Jane Doe', 123456789, '12th DoLittle St, Calgary, AB', FALSE),
(54529, 'John Smith', 213456789, '2nd Roosevelt Lane, Vancouver, BC', FALSE),
(89758, 'Jane Doe', 784596321, 'Jackson Avenue, Salt Lake City, Texas', FALSE),
(74159, 'Matthew Masters', 852417936, 'James Earl Jones Boulevard, Astera, NW', FALSE),
(96415, 'Farhan Dullahan', 159753248, 'Loc Lac St, Port Tanzania, OW', FALSE),
(25479, 'Marjaneh Imani', 300120040, 'Kunafa Tower, Akihabara', FALSE),
(98526, 'Sin Cos Tanjim', NULL, 'Grove St, Los Santos, San Andreas', FALSE),
-- Synthetic SSNs (auto-generated for customers without SSN):
(100000001, 'Alex NoSSN', 551112222, '123 Virtual Rd, Digital City', TRUE),
(100000002, 'Taylor Online', 553334444, '456 Cloud Ave, Webville', TRUE);

-- CUSTOMER (Using raw SHA2 for consistency with app.py's hashlib.sha256)
INSERT INTO CUSTOMER (EMAIL, SSN, PASSWORD_HASH) VALUES
('jane.doe@hotmail.com', 54128, SHA2('password123', 256)),
('john.smith@gmail.com', 54529, SHA2('smith1234', 256)),
('m.masters@gmail.com', 74159, SHA2('mattpass', 256)),
('drdullahan@ucalgary.ca', 96415, SHA2('dullahan123', 256)),
('no_ssn1@example.com', 100000001, SHA2('secure123', 256)),
('no_ssn2@example.com', 100000002, SHA2('mypassword', 256));

-- STORE
INSERT INTO STORE (STOREID, LOCATION, NAME, PHONE, MANAGER_ID) VALUES
(50, 'Castle Schrade, OW', 'Fatalis Corp', 5624189, NULL),
(100, 'Biotechnica Building, Night City', 'Viktor Industries', 74185279, NULL),
(255, '255 University Drive, Calgary, AB', 'Victor Von Doom Hardwares', 123459876, NULL);

-- EMPLOYEE (Using raw SHA2 for consistency with app.py's hashlib.sha256)
INSERT INTO EMPLOYEE (EMPLOYEE_ID, SSN, ROLE, STOREID, PASSWORD_HASH) VALUES
(148, 96415, 'Customer Service', 100, SHA2('emp148pass', 256)),
(500, 89758, 'Manager', 50, SHA2('manager500', 256)),
(1000, 54128, 'Manager', 255, SHA2('manager1000', 256));

-- Update Store Managers
UPDATE STORE SET MANAGER_ID = 500 WHERE STOREID = 50;
UPDATE STORE SET MANAGER_ID = 1000 WHERE STOREID = 255;

-- CATEGORY
INSERT INTO CATEGORY (CATEGORY_NAME, GENERATION) VALUES
('Processor', 7),
('Motherboard', 4),
('Graphics Card', 7),
('Laptop', 3);

-- SUPPLIER
INSERT INTO SUPPLIER (SUPPLIER_ID, NAME) VALUES
(15, 'Arasaka'),
(7, 'Dell'),
(19, 'Guild'),
(741, 'AMD');

-- SUPPLIER_DELIVERY
INSERT INTO SUPPLIER_DELIVERY (DELIVERY_NO, SUPPLIER_ID, STATUS, DELIVERY_DATE) VALUES
(2, 741, 'Delivered', '2023-01-15'),
(4, 7, 'Delivered', '2023-02-20'),
(5, 19, 'Pending', '2023-03-10');

-- Add new delivery
INSERT INTO SUPPLIER_DELIVERY (SUPPLIER_ID, STATUS, DELIVERY_DATE)
VALUES (15, 'Arrived', '2023-03-15');

-- PRODUCT (Removed ORDER_ID_CONTAINS)
INSERT INTO PRODUCT 
(PRODUCTID, NAME, PRICE, CATEGORY_NAME, STOREID, SUPPLIER_ID, DELIVERY_NO, NO_OF_PRODUCTS, IMAGE_URL)
VALUES 
(1, 'Core i7-13700K', 399.99, 'Processor', 255, 15, 2, 25, 'assets/static/p1.jpg'),
(2, 'RTX 4090', 1599.99, 'Graphics Card', 100, 19, 5, 10, 'assets/static/p2.jpg'),
(3, 'Dell XPS 15', 1499.99, 'Laptop', 50, 7, 4, 15, 'assets/static/p3.jpg');


-- INVENTORY
INSERT INTO INVENTORY (INVENTORY_ID, STOCK_LEVEL) VALUES
(1, 25),
(2, 10),
(3, 15);

-- ORDERS (Added sample ORDER_NUMBER)
INSERT INTO ORDERS (ORDER_ID, ORDER_DATE, ORDER_NUMBER, EMAIL, EMPLOYEE_ID, STATUS) VALUES
(1001, '2023-01-20', 'ORD-846291', 'jane.doe@hotmail.com', 148, 'Completed'),
(1002, '2023-02-25', 'ORD-173504', 'john.smith@gmail.com', 500, 'Pending'); -- Changed status to Pending

-- ORDER_ITEMS (Sample data for the new table)
INSERT INTO ORDER_ITEMS (ORDER_ID, PRODUCTID, QUANTITY, PRICE_AT_PURCHASE) VALUES
(1001, 2, 1, 1599.99), -- Jane bought 1 RTX 4090
(1002, 3, 1, 1499.99); -- John bought 1 Dell XPS 15

-- PAYMENT
INSERT INTO PAYMENT (PAYMENT_NO, PAYMENT_TYPE, AMOUNT, DATE, STATUS) VALUES
(1, 'Credit Card', 1599.99, '2023-01-20', 'Completed'),
(2, 'PayPal', 1499.99, '2023-02-25', 'Pending');

-- MAKES_PAYMENT
INSERT INTO MAKES_PAYMENT (PAYMENT_NO, ORDER_ID, EMAIL) VALUES
(1, 1001, 'jane.doe@hotmail.com'),
(2, 1002, 'john.smith@gmail.com');

-- UPDATES
INSERT INTO UPDATES (EMPLOYEE_ID, INVENTORY_ID, SUPPLIER_ID, DELIVERY_NO) VALUES
(148, 1, 15, 2),
(500, 2, 19, 5);

-- =====================
-- 4. INDEXES
-- =====================
CREATE INDEX idx_product_name ON PRODUCT(NAME);
CREATE INDEX idx_product_category ON PRODUCT(CATEGORY_NAME);
CREATE INDEX idx_order_date ON ORDERS(ORDER_DATE);
CREATE INDEX idx_order_number ON ORDERS(ORDER_NUMBER); -- Added index for ORDER_NUMBER

-- =====================
-- 5. SECURITY FEATURES
-- =====================
-- Password history tracking
CREATE TABLE PASSWORD_HISTORY (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (email) REFERENCES CUSTOMER(EMAIL)
);

-- Registration procedure with auto-SSN
DELIMITER //
CREATE PROCEDURE register_customer(
    IN p_name VARCHAR(255),
    IN p_email VARCHAR(255),
    IN p_password VARCHAR(255),
    IN p_phone INT,
    IN p_address VARCHAR(255)
)
BEGIN
    DECLARE temp_ssn INT;
    
    -- Generate synthetic SSN (first 9 digits of SHA256 hash)
    SET temp_ssn = CONV(SUBSTRING(SHA2(p_email, 256), 1, 8), 16, 10) % 1000000000;
    
    -- Insert with synthetic SSN
    INSERT INTO PERSON (SSN, NAME, PHONE, ADDRESS, is_synthetic_ssn)
    VALUES (temp_ssn, p_name, p_phone, p_address, TRUE);
    
    -- Insert customer with hashed password (raw SHA2)
    INSERT INTO CUSTOMER (EMAIL, SSN, PASSWORD_HASH)
    VALUES (p_email, temp_ssn, SHA2(p_password, 256));
    
    -- Log password (raw SHA2)
    INSERT INTO PASSWORD_HISTORY (email, password_hash)
    VALUES (p_email, SHA2(p_password, 256));
END//
DELIMITER ;

-- Update root user authentication to mysql_native_password
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'qwerty';
FLUSH PRIVILEGES;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
